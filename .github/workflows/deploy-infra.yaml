name: Deploy infrastructure with Terraform

on:
  push:
    branches:
      - 'main'
    paths:
      - 'terraform/**'
      - 'Makefile'
      - '.github/workflows/deploy-infra.yaml'
      - 'scripts/generate_tfstate_backend.py'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: # uncomment additional environments
          # - dev
          # - staging
          - prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: recursive

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_wrapper: false

      - name: Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5
        with:
          python-version: '3.13'

      - name: Request OIDC Token
        run: |
          echo "Requesting OIDC token..."
          JWT=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value')
          echo "OIDC_TOKEN=$JWT" >> $GITHUB_ENV

      - name: Get Infisical Secrets
        uses: Infisical/secrets-action@08d433afae6a851f9081d0563a01a55fdf96568b # v1.0.11
        with:
          method: "oidc"
          domain: ${{ secrets.INFISICAL_HOST }}
          identity-id: ${{ secrets.INFISICAL_MACHINE_IDENTITY_ID }}
          project-slug: ${{ secrets.INFISICAL_COMMON_SECRETS_SLUG }}
          env-slug: ${{ matrix.environment }}
          recursive: "true"

      - name: Configure AWS Credentials for tfstate bucket
        uses: aws-actions/configure-aws-credentials@v4.1.0
        id: aws-credentials
        with:
          aws-region: ${{ env.TFSTATE_BUCKET_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          output-credentials: true

      - name: Setup Tailscale for PVE authentication
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ env.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ env.TS_OAUTH_SECRET }}
          tags: tag:ci
          args: --accept-routes
          use-cache: "true"

      - name: SSH Agent for PVE authentication
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.PVE_SSH_KEY }}

      - name: Get app and org names
        run: |
          repo=${{ github.repository }}
          app=$(echo "$repo" | cut -d "/" -f 2 | sed 's/compose-//')
          if [[ "${{ matrix.environment }}" != "prod" ]]; then
            app="${app}-${{ matrix.environment }}"
          fi
          echo "APP_SHORTNAME=$app" >> $GITHUB_ENV
          org=$(echo "$repo" | cut -d "/" -f 1)
          echo "ORG_SHORTNAME=$org" >> $GITHUB_ENV

      - name: Run Terraform
        run: make terraform
        env:
          # tfstate backend variables
          AWS_ROLE_ARN: ${{ env.AWS_ROLE_ARN }}
          AWS_OIDC_TOKEN: ${{ steps.aws-credentials.outputs.aws-session-token }}
          AWS_TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET }}
          AWS_TFSTATE_BUCKET_REGION: ${{ env.TFSTATE_BUCKET_REGION }}
          # app variables
          CLOUDFLARE_DOMAIN: ${{ env.CLOUDFLARE_DOMAIN }}
          TF_VAR_APP_SHORTNAME: ${{ env.APP_SHORTNAME }}
          TF_VAR_ORG_SHORTNAME: ${{ env.ORG_SHORTNAME }}
          TF_VAR_ENV_SLUG: ${{ matrix.environment }}
          # Infisical environment variables
          INFISICAL_AUTH_JWT: ${{ env.OIDC_TOKEN }}
          INFISICAL_MACHINE_IDENTITY_ID: ${{ secrets.INFISICAL_MACHINE_IDENTITY_ID }}
          INFISICAL_HOST: ${{ secrets.INFISICAL_HOST }}
          TF_VAR_INFISICAL_PROJECT_SLUG: ${{ secrets.INFISICAL_PROJECT_SLUG }}
          TF_VAR_INFISICAL_ADMIN_USER: ${{ env.INFISICAL_ADMIN_USER }}
